generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  username       String
  email          String         @unique
  password       String
  phonenumber    String?        @default("")
  profession     String?        @default("")
  descreption    String?        @default("One Liner! Bt for HR this Time")
  ctc            String?
  location       String?
  skills         String[]       @default([])
  githubprofile  GitHubProfile?
  alreadyapplied jobschema[]    @relation("UserTojobschema")
  Applications   Applications[]

  @@index([username, email])
}

model GitHubProfile {
  id           String       @id @default(uuid())
  username     String       @unique
  avatarUrl    String
  name         String?
  bio          String?
  location     String?
  company      String?
  blog         String?
  publicRepos  Int
  followers    Int
  following    Int
  htmlUrl      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  repositories Repository[]

  @@index([id, username, userId])
}

model Repository {
  id              String        @id @default(uuid())
  name            String
  fullName        String?
  description     String?
  htmlUrl         String
  stargazersCount Int
  forksCount      Int
  language        String?
  archived        Boolean       @default(false)
  fork            Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  profileId       String
  githubProfile   GitHubProfile @relation(fields: [profileId], references: [id])

  @@index([name, language, profileId])
}

model Admin {
  id           String      @id @default(uuid())
  name         String
  username     String
  email        String      @unique
  password     String
  phonenumber  String
  canDeleteJob Boolean?    @default(false)
  canPostJob   Boolean?    @default(false)
  postedjobs   jobschema[]

  @@index([id])
}

model jobschema {
  id                  String         @id @default(uuid())
  title               String
  descreption         String
  joblink             String
  postedbyId          String
  companyname         String
  experience          Int
  salary              Int
  timestamps          DateTime       @default(now())
  jobTypes            JobType[]
  languageRequirement String[]       @default([])
  createdAt           DateTime?      @default(now())
  postedby            Admin          @relation(fields: [postedbyId], references: [id])
  appliedusers        User[]         @relation("UserTojobschema")
  location            String?        @default("")
  Applications        Applications[]

  @@index([timestamps])
  @@index([jobTypes])
  @@index([experience])
  @@index([salary])
}

// for the leaderboard bt may be i need to learn about the redis and those queues first
model Applications {
  id        String    @id @default(uuid())
  student   User      @relation(fields: [studentId], references: [id])
  studentId String
  job       jobschema @relation(fields: [jobId], references: [id])
  jobId     String
  appliedAt DateTime?
}

enum JobType {
  FULLTIME
  REMOTE
  INTERNSHIP
  CONTRACT
}
